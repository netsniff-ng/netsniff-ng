/*
 * netsniff-ng - the packet sniffing beast
 * By Daniel Borkmann <daniel@netsniff-ng.org>
 * Copyright 2012 Daniel Borkmann <dborkma@tik.ee.ethz.ch>,
 * Swiss federal institute of technology (ETH Zurich)
 * Subject to the GPL, version 2.
 */

/* lex-func-prefix: zz */

%{

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "bpf_hla_parser.tab.h"
#include "bpf_symtab.h"
#include "built_in.h"

void bpf_hla_lex_init(void);

struct res_keywords {
	const char *key;
	int token;
};

#define KEYPAIR(k,t)	{ .key = (k), .token = (t)}
static const struct res_keywords keytab[] = {
	KEYPAIR("def",  K_DEF),
	KEYPAIR("pkt",  K_PKT),
	KEYPAIR("ret",  K_RET),
	KEYPAIR("if",   K_IF),
	KEYPAIR("elif", K_ELIF),
	KEYPAIR("else", K_ELSE),
	/* short macros */
	KEYPAIR("ipv4", K_MACRO_IPV4),
	KEYPAIR("ipv6", K_MACRO_IPV6),
	KEYPAIR("ip",   K_MACRO_IP),
	KEYPAIR("udp",  K_MACRO_UDP),
	KEYPAIR("tcp",  K_MACRO_TCP),
};

void bpf_hla_lex_init(void)
{
	size_t i;
	for (i = 0; i < array_size(keytab); ++i)
		bpf_symtab_insert(keytab[i].key, keytab[i].token);
}

#define YY_USER_INIT	bpf_hla_lex_init();

extern void zzerror(const char *);

%}

%option align
%option nounput
%option noyywrap
%option noreject
%option 8bit
%option caseless
%option noinput
%option nodefault

alpha		[A-Za-z]
alphanum	[A-Za-z0-9]

number_oct	([0][0-9]+)
number_hex	([0][x][a-fA-F0-9]+)
number_bin	([0][b][0-1]+)
number_dec	(([0])|([-+]?[1-9][0-9]*))

%%

{alpha}{alphanum}* {
		zzlval.idx = bpf_symtab_find(zztext);
		if (zzlval.idx < 0) {
			zzlval.idx = bpf_symtab_insert(zztext, K_NAME);
			return K_NAME;
		  } else {
			return bpf_symtab_type(zzlval.idx);
		}}

"("		{ return '('; }
")"		{ return ')'; }
"{"		{ return '{'; }
"}"		{ return '}'; }
"="		{ return '='; }
";"		{ return ';'; }
","		{ return ','; }
"+"		{ return '+'; }
"-"		{ return '-'; }
"&"		{ return '&'; }
"|"		{ return '|'; }
"^"		{ return '^'; }
"!"		{ return '!'; }
"<"		{ return '<'; }
">"		{ return '>'; }
"*"		{ return '*'; }
"/"		{ return '/'; }
"%"		{ return '%'; }

{number_hex}	{ zzlval.number = strtoul(zztext, NULL, 16);
		  return number; }

{number_dec}	{ zzlval.number = strtol(zztext, NULL, 10);
		  return number; }

{number_oct}	{ zzlval.number = strtol(zztext + 1, NULL, 8);
		  return number; }

{number_bin}	{ zzlval.number = strtol(zztext + 2, NULL, 2);
		  return number; }

"/*"([^\*]|\*[^/])*"*/" { /* NOP */ }
";"[^\n]*	{/* NOP */}
"\n"		{ zzlineno++; }
[ \t]+		{/* NOP */ }
.		{ printf("Unknown character '%s'", zztext);
		  zzerror("lex Unknown character"); }

%%
